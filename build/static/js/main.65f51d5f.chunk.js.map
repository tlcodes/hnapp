{"version":3,"sources":["components/Navbar.js","components/Stories.js","actions/index.js","components/Footer.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["withRouter","react_default","a","createElement","className","Link","to","NavLink","Show","componentDidMount","route","_this","props","fetchStories","this","stories","storiesList","length","map","story","key","id","href","url","target","rel","title","score","by","Component","connect","state","ownProps","match","path","substring","dispatch","axios","get","then","data","slice","idList","type","addStory","Footer","App","BrowserRouter","components_Navbar","Route","exact","component","Stories","components_Footer","Boolean","window","location","hostname","initialState","top","new","ask","show","job","store","createStore","arguments","undefined","action","newStories","find","item","Object","toConsumableArray","concat","objectSpread","defineProperty","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65f51d5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, NavLink, withRouter} from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n      <div>\r\n        <nav>\r\n            <ul>\r\n                <li className=\"logo\">HNAPP</li>\r\n                <li><Link to='/'>Home</Link></li>\r\n                <li><NavLink to='/new'>New</NavLink></li>                \r\n                <li><NavLink to='/ask'>Ask</NavLink></li>                \r\n                <li><NavLink to='/show'>Show</NavLink></li>                \r\n                <li><NavLink to='/jobs'>Jobs</NavLink></li>             \r\n            </ul>\r\n        </nav>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport fetchStories from '../actions/index.js';\r\n\r\n\r\nclass Show extends Component {\r\n  \r\n  fetchStories(route) {\r\n    this.props.fetchStories(route)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { route } = this.props;\r\n    this.fetchStories(route);\r\n  }\r\n  \r\n  render() {\r\n    const { stories } = this.props;\r\n    const storiesList = stories.length ? (\r\n      stories.map(story => {          \r\n        return(            \r\n            <li key={story.id}>\r\n                <a href={story.url} target=\"_blank\" rel='noopener noreferrer'>{story.title}</a>\r\n                <br/><span className=\"details\">Score: {story.score} - submitted by {story.by}</span>\r\n          </li>\r\n        )\r\n      })\r\n    ) : (\r\n      <p>Loading stories...</p>\r\n    )\r\n\r\n    return (\r\n      <div className=\"stories\">\r\n        <ul>\r\n            {storiesList}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let route;\r\n  switch (ownProps.match.path.substring(1)) {\r\n      case 'jobs': route = 'job';\r\n      break;\r\n      case '': route = 'top';\r\n      break;\r\n      default: route = ownProps.match.path.substring(1);\r\n  }\r\n  return {\r\n      stories: state[route],\r\n      route\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      fetchStories: (route) => dispatch(fetchStories(route))\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Show);","import axios from 'axios';\r\n\r\nexport default function fetchStories(route){\r\n    return (dispatch) => {\r\n        return axios.get('https://hacker-news.firebaseio.com/v0/'+route+'stories.json?print=pretty')\r\n        .then(data => data.data.slice(0,15))\r\n        .then(idList => idList.map(id => {\r\n          return axios.get('https://hacker-news.firebaseio.com/v0/item/'+id+'.json')\r\n          .then(story => {\r\n              if (!story ) {return }\r\n              dispatch(addStory(story.data, route))\r\n            })\r\n        }))\r\n    }\r\n}\r\n\r\nexport function addStory(story, route) {\r\n    return {\r\n        type: 'ADD_STORY',\r\n        story,\r\n        route\r\n    }\r\n}","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <p>Made with <span className=\"headbang\">wall headbang and facepalm</span> <span className=\"heart\">&#x2665;</span> by Tom Leroy</p>\r\n            <p>Thank you, <a href=\"https://github.com/HackerNews/API\" target=\"_blank\" rel=\"noopener noreferrer\">HakerNews</a>!</p>                      \r\n        </footer>\r\n        );\r\n  }\r\n\r\n  export default Footer","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Stories from './components/Stories';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route exact path='/' component={Stories} />\n          <Route exact path='/new' component={Stories} />\n          <Route exact path='/show' component={Stories} />\n          <Route exact path='/ask' component={Stories} />\n          <Route exact path='/jobs' component={Stories} />\n          <Footer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    top: [],\r\n    new: [],\r\n    ask: [],\r\n    show: [],\r\n    job: []\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    \r\n  case 'ADD_STORY':\r\n  // some stories are null (only happen with jobs),\r\n  // and we don't want to include those already stored\r\n  let newStories = action.story === null || state[action.route].find(item => item.id === action.story.id)\r\n                  ? state[action.route]\r\n                  : [...state[action.route], action.story];\r\n  \r\n    return {\r\n        ...state,\r\n        [action.route]: newStories \r\n    }\r\n\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}